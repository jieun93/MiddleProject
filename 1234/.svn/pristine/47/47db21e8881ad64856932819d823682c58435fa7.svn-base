package kr.or.ddit.AlertDialog;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.stage.Stage;

public class DownloadDialogController {
	private String filePath;
	private File inputFile;
	private File outputFile;
	private double downloadState = 0;
	
	private Task<Integer> task = new Task<Integer>() {
		protected Integer call() throws Exception {
			
			FileOutputStream fos = new FileOutputStream(inputFile);
			FileInputStream fis = new FileInputStream(outputFile);	
			System.out.println("input : "+inputFile);
			System.out.println("output : "+outputFile);
			long fSize = inputFile.length();
			long downState = 0L;
			byte[] buffer = new byte[1024];
			int length = 0;
			try {
		
				while ((length = fis.read(buffer)) != -1) {
					fos.write(buffer, 0, length);
					downState += length;
					updateProgress(downloadState, 1);
					downloadState = (double)downState / (double)fSize;
					
					Thread.sleep(10);
				}
				System.out.println("다운로드완료.");
				fos.flush();
				fos.close();
				fis.close();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			} 
			
			btnConfirm.setDisable(false);
			btnCancle.setDisable(true);
			
			
			return 0;
		}
	};

    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private ProgressBar pgSend;

    @FXML
    private Button btnConfirm;

    @FXML
    private Button btnCancle;

    @FXML
    private Label tfFileName;

    @FXML
    void onClickBtnCancle(ActionEvent event) {
    	Stage stage=(Stage)btnConfirm.getScene().getWindow();
    	
    	if(AlertUtil.showAlert(stage, "파일 전송이 진행중입니다 취소하시겠습니까?")) {
    		File file = new File(filePath); // 수정해야함
    		file.delete();
    		stage.close();
    	}
    }

    @FXML
    void onClickedBtnConfirm(ActionEvent event) {
    	Stage stage = (Stage)btnCancle.getScene().getWindow();
    	stage.close();
    }

	
    

    public void setFilePath(String filePath,File file) {    	
    	this.filePath = filePath;
    	inputFile = file;
    	File outfile = new File(filePath + inputFile.getName());
    	outputFile = outfile;
    	tfFileName.setText(inputFile.getName());
    	pgSend.progressProperty().bind(task.progressProperty());
    	
    	Thread thread = new Thread(task);
//    	thread.setDaemon(true);
		thread.start();
		System.out.println("실행됨2");
		
    }

    
	
    @FXML
    void initialize() {
    	System.out.println("실행됨1");
    	btnConfirm.setDisable(true);  	
    }
}
