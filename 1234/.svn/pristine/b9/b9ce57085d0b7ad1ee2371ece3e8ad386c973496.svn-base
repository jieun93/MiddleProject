package kr.or.ddit.controller.mypage;

import java.io.IOException;
import java.lang.invoke.MethodHandles.Lookup;
import java.net.URL;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Properties;
import java.util.ResourceBundle;

import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import kr.or.ddit.AlertDialog.AlertUtil;
import kr.or.ddit.controller.adminmypage.AddSearch;
import kr.or.ddit.controller.adminmypage.MemberInfoController;
import kr.or.ddit.controller.adminmypage.MemberInfoModifyController;
import kr.or.ddit.service.mypage.IMymemberService;
import kr.or.ddit.vo.MemberVO;

public class MyInformationController {

	private IMymemberService service;

	private MemberVO memVO;
	private String confirmNumber = "";

	private MemberInfoModifyController modifyContoller;

	public MemberInfoModifyController getModifyController() {
		return modifyContoller;
	}

	public void setModifyContoller(MemberInfoModifyController modifyContoller) {
		this.modifyContoller = modifyContoller;
	}

	@FXML
	private ResourceBundle resources;

	@FXML
	private URL location;

	@FXML
	private AnchorPane memberView;

	@FXML
	private TextField tfId;

	@FXML
	private TextField tfPass;

	@FXML
	private TextField tfRePass;

	@FXML
	private TextField tfName;

	@FXML
	private TextField tfReg;

	@FXML
	private TextField tfAdd;

	@FXML
	private TextField tfTel;

	@FXML
	private TextField tfEmail;

	@FXML
	private TextField tfInputNum;

	@FXML
	private TextField tfAdd2;

	@FXML
	private Label passLabel;

	@FXML
	private Label idLabel;

	@FXML
	private Label nameLabel;

	@FXML
	private Label telLabel;

	@FXML
	private Label emailLabel;

	@FXML
	private Label regLabel;
	// 회원 수정
	@FXML
	private Button btnModify;
// 회원 탈퇴
	@FXML
	private Button btnOut;
// 이메일 전송
	@FXML
	private Button btnemailCon;
	// 인증번호 확인
	@FXML
	private Button btnnumCom;
// 주소 검색 
	@FXML
	private Button btnAddSerach;

	// 주소 검색
	@FXML
	void btnAddSearch(MouseEvent event) {
		try {

			FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("../../fxml/adminmypage/AddSearch.fxml"));
			Parent root = (Parent) fxmlLoader.load();
			Stage primaryStage = (Stage) btnAddSerach.getScene().getWindow();

			Stage primaryStage2 = new Stage(StageStyle.DECORATED);
			primaryStage2.initModality(Modality.WINDOW_MODAL);
			primaryStage2.initOwner(primaryStage);

			AddSearch controller = fxmlLoader.getController();
			controller.setDialog(this);

			Scene scene = new Scene(root);
			primaryStage2.setScene(scene);
			primaryStage2.setTitle("주소 검색");
			primaryStage2.show();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 3번째 창한테 받은 정보
	public void inputAddr(String zipcode, String addr) {
		tfAdd.setText(zipcode);
		tfAdd2.setText(addr);
	}

	// 이메일 전송
	@FXML
	void btnEmailCon(MouseEvent event) {
		
//불러오기
    	
    	Stage stage = (Stage) btnemailCon.getScene().getWindow();
    	
    	if(tfEmail.getText().isEmpty()) {
    		AlertUtil.showAlertOnlyConfirm(stage, "입력하신 이메일을  다시 확인해주세요", "확인");
    		
    	}else {
    	AlertUtil.showAlertOnlyConfirm(stage, "이메일이 전송되었습니다. 확인해주세요", "확인");
    	}
    	
    	mail();
	}

	// 인증번호 확인
	@FXML
	void btnNumCon(MouseEvent event) {
		if (tfInputNum.getText().equals(confirmNumber)) {
			// 일치했을때
			Stage currStage = (Stage) btnnumCom.getScene().getWindow();
			AlertUtil.showAlert((Stage) btnnumCom.getScene().getWindow(), "입력하신 인증번호가 ", "확인되었습니다.", "확인", "취소");
		} else {
			// 일치하지 않을때
			Stage currStage = (Stage) btnnumCom.getScene().getWindow();
			AlertUtil.showAlert((Stage) btnnumCom.getScene().getWindow(), "입력하신 인증번호가 ", "틀렸습니다.", "확인", "취소");
		}
	}

	private void mail() {
		try {

			String host = "smtp.naver.com";
			String user = "xovud925@naver.com"; // 계정
			String password = "wldms*36810"; // 패스워드

			// SMTP 서버 정보를 설정
			Properties props = new Properties();
			props.put("mail.smtp.host", host);
			props.put("mail.smtp.port", 587);
			props.put("mail.smtp.auth", "true");

			Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
				protected PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication(user, password);
				}
			});

			try {
				MimeMessage message = new MimeMessage(session);
				message.setFrom(new InternetAddress(user));
				message.addRecipient(javax.mail.Message.RecipientType.TO, new InternetAddress(tfEmail.getText()));

				// 메일 제목
				message.setSubject("안녕하세요. 경매관리시스템 AIMS 입니다.");

				// 메일 내용

				for (int i = 0; i < 6; i++) {
					int a = (int) (Math.random() * 10);
					confirmNumber += a + "";
				}

				message.setText("인증번호는" + "" + confirmNumber + "" + "입니다.");

				// 메일 보내기
				Transport.send(message);
				System.out.println(message);
				System.out.println("메일 전송 완료!");

			} catch (MessagingException e) {
				e.printStackTrace();
				System.out.println("전송실패");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// 정보 수정
	@FXML
	void btnModify(ActionEvent event) {

		if (tfId.getText().isEmpty() || tfPass.getText().isEmpty() || tfPass.getText().isEmpty()
				|| tfRePass.getText().isEmpty() || tfEmail.getText().isEmpty() || tfName.getText().isEmpty()
				|| tfReg.getText().isEmpty() || tfTel.getText().isEmpty() || tfAdd.getText().isEmpty()
				|| tfAdd2.getText().isEmpty() || tfInputNum.getText().isEmpty()) {

			Stage currentStage = (Stage) btnModify.getScene().getWindow();
			AlertUtil.showAlert((Stage) btnModify.getScene().getWindow(), "빈칸을 입력해주세요");
		} else {
			try {
				Stage currentStage = (Stage) btnModify.getScene().getWindow();
				boolean a = AlertUtil.showAlert((Stage) btnModify.getScene().getWindow(), "회원정보를 수정하시겠습니까?", "", "확인",
						"취소");
				int cnt = 0;
				if (a == false) {
					return;
				} else {

					// 수정한 데이터 저장하는거
					memVO = new MemberVO();
					memVO.setMem_id(tfId.getText());
					memVO.setMem_pass(tfPass.getText());
					memVO.setMem_email(tfEmail.getText());
					memVO.setMem_name(tfName.getText());
					memVO.setMem_regno(tfReg.getText());
					memVO.setMem_tel(tfTel.getText());
					memVO.setMem_zip(tfAdd.getText());
					memVO.setMem_addr(tfAdd2.getText());

					cnt = service.updataMyInfo(memVO);
				}

				if (cnt > 0) {
					AlertUtil.showAlert((Stage) btnModify.getScene().getWindow(), "수정되었습니다.");
				}else {
					AlertUtil.showAlert((Stage) btnModify.getScene().getWindow(), "수정 작업 실패!");
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

		}

	}

	// 회원 탈퇴버튼을 누르면 회원 탈퇴 창으로 넘어 가는거
	@FXML
	void btnOut(ActionEvent event) throws IOException {

		Parent root = FXMLLoader.load(MymemberController.class.getResource("../../fxml/mypage/Mymemtaltoe.fxml"));

		for (int i = 0; i < memberView.getChildren().size(); i++) {
			memberView.getChildren().remove(i);
		}

		memberView.getChildren().addAll(root);

	}

	// 화면 전환해서 보여지는거
	public void show(MemberVO mifVO) {

		this.memVO = mifVO;
		tfId.setText(mifVO.getMem_id());
		tfPass.setText(mifVO.getMem_pass());
		tfName.setText(mifVO.getMem_name());
		tfReg.setText(mifVO.getMem_regno());
		tfTel.setText(mifVO.getMem_tel());
		tfEmail.setText(mifVO.getMem_email());
		tfAdd.setText(mifVO.getMem_zip());
		tfAdd2.setText(mifVO.getMem_addr());
		// 아이디 값은 비활성화
		tfId.setEditable(false);

	}

	@FXML
	void initialize() {

		try {
			Registry reg = LocateRegistry.getRegistry(8888);
			service = (IMymemberService) reg.lookup("IMymemberService");
		} catch (RemoteException e) {
			e.printStackTrace();
		} catch (NotBoundException e) {
			e.printStackTrace();
		}

		// 기본 정보 id를 입력해놓는거
		try {
			memVO = service.getMyInfoList("pengsu");
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		show(memVO);

		// 정규식---------------------------------------------------------------------------------------------------------

		// 패스워드
		tfPass.textProperty().addListener((Observable, oldValue, newValue) -> {
			if (!newValue.matches("[A-Za-z0-9_-]{5,15}")) {
				if (!newValue.matches("\\d*")) {
					tfPass.setText(newValue.replaceAll("[A-Za-z0-9_-]{5,15}", ""));
					passLabel.setText("5-15자의 영문자, 숫자만 가능");
				}
			} else if (newValue.matches("[A-Za-z0-9_-]{5,15}")) {
				passLabel.setText(" ");
			}
		});

		// 패스워드 일치

		tfRePass.textProperty().addListener((Observable, oldValue, newValue) -> {
			if (!tfPass.getText().equals(tfRePass.getText())) {
				passLabel.setText("비밀번호가 일치하지 않습니다.");
			} else if (newValue.equals(tfRePass.getText())) {
				passLabel.setText("");

			}
		});

		// 이름
		tfName.textProperty().addListener((Observable, oldValue, newValue) -> {
			if (!newValue.matches("^[가-힣]*$")) {
				if (!newValue.matches("\\d*")) {
					tfName.setText(newValue.replaceAll("^[가-힣]*$", ""));
					nameLabel.setText("정확한 한글 이름을 입력해 주세요.");
				}
			} else if (newValue.matches("^[가-힣]*$")) {
				nameLabel.setText(" ");
			}
		});

		// 주민등록번호
		tfReg.textProperty().addListener((Observable, oldValue, newValue) -> {
			if (!newValue.matches("[0-9]{6}\\-[0-9]{7}$")) {
				if (!newValue.matches("\\d*")) {
					tfReg.setText(newValue.replaceAll("[0-9]{6}\\-[0-9]{7}$", ""));
					regLabel.setText("주민번호 13자리를 입력해주세요. ex) 123456-1234567");
				}
			} else if (newValue.matches("[0-9]{6}\\-[0-9]{7}$")) {
				regLabel.setText(" ");
			}
		});

		 // 전화번호
        tfTel.textProperty().addListener((Observable, oldValue, newValue) -> {
           if(!newValue.matches("[0-9]{3}\\-[0-9]{4}\\-[0-9]{4}$")) {
              if(!newValue.matches("\\d*")) {
            	  tfTel.setText(newValue.replaceAll("[0-9]{3}\\-[0-9]{4}\\-[0-9]{4}$", ""));
                 telLabel.setText("형식에 맞게 입력해주세요. ex) 010-1234-5678");
              }
           }else if(newValue.matches("[0-9]{3}\\-[0-9]{4}\\-[0-9]{4}$")) {
              telLabel.setText(" ");
           }
        });

		String emailPattern = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
				+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

		// 이메일 정규식 확인
		tfEmail.textProperty().addListener((Observable, oldValue, newValue) -> {
			if (!newValue.matches(emailPattern)) {
				if (!newValue.matches("\\d*")) {
					tfEmail.setText(newValue.replaceAll(emailPattern, ""));
					emailLabel.setText("형식에 맞는 이메일주소를 입력해주세요.");
				}
			} else if (newValue.matches(emailPattern)) {
				emailLabel.setText(" ");
			}
		});

	}

}
