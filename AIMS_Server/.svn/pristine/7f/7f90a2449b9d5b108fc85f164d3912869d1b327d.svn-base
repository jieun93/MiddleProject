package kr.or.ddit.service.auction;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import kr.or.ddit.dao.aution.auctionDAOImpl;
import kr.or.ddit.vo.A_articleVO;


public class auctionServerImpl  extends UnicastRemoteObject implements IauctionServer{

	private Map<String,List<Socket>> roomMap = Collections.synchronizedMap(new HashMap<String, List<Socket>>());
	private Map<String,List<Socket>> cntMap = Collections.synchronizedMap(new HashMap<String, List<Socket>>());
	private Map<String,List<String>> setMap = Collections.synchronizedMap(new HashMap<String, List<String>>());
	private auctionDAOImpl dao; 
	private static auctionServerImpl instance;
	
	private auctionServerImpl() throws RemoteException {
		dao = auctionDAOImpl.getInstance();
		StartSocket th = new StartSocket();
		StartSocket1 th1 = new StartSocket1();
		th1.start();
		th.start();
		new AcutionScheduler(this);
	}
	
	public static auctionServerImpl getInstance() {
		if(instance == null) {
			try {
				instance = new auctionServerImpl();
				
			} catch (RemoteException e) {
				e.printStackTrace();
			} 
		}
		return  instance;
	}
	
	
	@Override
	public List<A_articleVO> getMyArticleList(String mem_id) throws RemoteException {
		return dao.getMyArticleList(mem_id);
	}

	@Override
	public List<A_articleVO> getTotalArticleList() throws RemoteException {	
		return dao.getTotalArticleList();
	}

	@Override
	public A_articleVO getArticleInfo(String a_art_no) throws RemoteException {
		return dao.getArticleInfo(a_art_no);
	}
	
	
	public void setRoomMap(Map<String,List<Socket>> map) {
		roomMap = map;
	}

	public void setSetMap(Map<String,List<String>> map) {
		setMap = map;
	}
	
	
	public void sendtoAlldata(String a_art_no,String data) {
		for(Socket socket:roomMap.get(a_art_no)) {
			DataOutputStream out ;
			try {
				out = new DataOutputStream(socket.getOutputStream());
				out.writeUTF(data);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void sendtoAlldata1(String a_art_no,String data) {
		for(Socket socket:cntMap.get(a_art_no)) {
			DataOutputStream out ;
			try {
				out = new DataOutputStream(socket.getOutputStream());
				out.writeUTF(data);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	
	class insertSocket extends Thread{
		Socket socket;
		DataInputStream in;
		DataOutputStream out;
		String a_art_no;
	
		public insertSocket(Socket socket) {
			this.socket = socket;
			try {
				in = new DataInputStream(socket.getInputStream());
				out = new DataOutputStream(socket.getOutputStream());
				a_art_no = in.readUTF();
				if(roomMap.get(a_art_no)==null) {
					List<Socket>list = Collections.synchronizedList(new ArrayList<Socket>());
					list.add(socket);
					roomMap.put(a_art_no, list);
					List<String>datalist = Collections.synchronizedList(new ArrayList<String>());
					datalist.add(dao.getArticleInfo(a_art_no).getA_art_low());
					datalist.add("입찰자 없음");
					datalist.add("준비중");
					setMap.put(a_art_no,datalist);
				}else {
					roomMap.get(a_art_no).add(socket);
				}
				out.writeUTF(setMap.get(a_art_no).get(0)); // 돈 
				out.writeUTF(setMap.get(a_art_no).get(1)); // 입찰자
				out.writeUTF(setMap.get(a_art_no).get(2)); // 상태
			} catch (IOException e) {
				e.printStackTrace();
			}	
		}
		
		@Override
		public void run() {
			try {
				while (socket != null) {
					
					if(in.readUTF().equals("info")) {
						String id = in.readUTF();
						String won = in.readUTF();
						setMap.get(a_art_no).set(1, id);
						setMap.get(a_art_no).set(0, won);
//						sendtoAlldata(a_art_no, "info"); // 아이디
						sendtoAlldata(a_art_no, setMap.get(a_art_no).get(1)); // 아이디
						sendtoAlldata(a_art_no, setMap.get(a_art_no).get(0)); // 금액	
						sendtoAlldata(a_art_no, setMap.get(a_art_no).get(2)); // 상태
					}
					 
				}
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				roomMap.get(a_art_no).remove(socket);
			}
		}
	}
	
	
	class StartSocket extends Thread{
		@Override
		public void run() {
			try {
				ServerSocket server = new ServerSocket(9999);
				while (server != null) {
					Socket socket = server.accept();
					insertSocket th = new insertSocket(socket);
					th.start();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	class StartSocket1 extends Thread{
		@Override
		public void run() {
			try {
				ServerSocket server = new ServerSocket(9998);
				while (server != null) {
					Socket socket = server.accept();
					insertSocket th = new insertSocket(socket);
					th.start();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	class insertSocket1 extends Thread{
		Socket socket;
		DataInputStream in;
		DataOutputStream out;
		String a_art_no;
		cntThread th;
		public insertSocket1(Socket socket) {
			this.socket = socket;
			try {
				in = new DataInputStream(socket.getInputStream());
				out = new DataOutputStream(socket.getOutputStream());
				if(roomMap.get(a_art_no)==null) {
					List<Socket>list = Collections.synchronizedList(new ArrayList<Socket>());
					list.add(socket);
					cntMap.put(a_art_no, list);
					
				}else {
					cntMap.get(a_art_no).add(socket);
				}	
			} catch (IOException e) {
				e.printStackTrace();
			}	
		}
		
		@Override
		public void run() {
			try {				
				while (socket != null) {
					String state = in.readUTF();
					if(state.equals("start")) {
						setMap.get(a_art_no).set(2, "경매중");
						th = new cntThread(a_art_no);
						
						th.start();
					}else if(state.equals("reset")) {
						if(th != null) {
							th.setstop();
							th = new cntThread(a_art_no);							
						}
					}
				}
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				cntMap.get(a_art_no).remove(socket);
			}
		}
	}
	
	class cntThread extends Thread{
		private String a_art_no;
		private boolean state;
		public cntThread(String a_art_no) {
			this.a_art_no = a_art_no;
		}
		
		public void setstop() {
			state = true;
		}
		
		@Override
		public void run() {
			try {
				while(!state) {
					sendtoAlldata1(a_art_no, "1");
					Thread.sleep(2500);
					sendtoAlldata1(a_art_no, "2");
					Thread.sleep(2500);
					sendtoAlldata1(a_art_no, "3");
					break;
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
		}
		
	}

}
