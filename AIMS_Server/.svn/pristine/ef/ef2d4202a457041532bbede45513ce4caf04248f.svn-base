package kr.or.ddit.service.auction;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import kr.or.ddit.dao.aution.auctionDAOImpl;
import kr.or.ddit.vo.A_articleVO;


public class auctionServerImpl  extends UnicastRemoteObject implements IauctionServer{

	private Map<A_articleVO,List<Socket>> roomMap = new HashMap<A_articleVO, List<Socket>>();
	
	private auctionDAOImpl dao; 
	private static auctionServerImpl instance;

	private auctionServerImpl() throws RemoteException {
		dao = auctionDAOImpl.getInstance();

		StartSocket th = new StartSocket();
		th.start();
	}
	
	public static auctionServerImpl getInstance() {
		if(instance == null) {
			try {
				instance = new auctionServerImpl();
				
			} catch (RemoteException e) {
				e.printStackTrace();
			} 
		}
		return  instance;
	}
	
	
	@Override
	public List<A_articleVO> getMyArticleList(String mem_id) throws RemoteException {
		return dao.getMyArticleList(mem_id);
	}

	@Override
	public List<A_articleVO> getTotalArticleList() throws RemoteException {	
		return dao.getTotalArticleList();
	}

	@Override
	public A_articleVO getArticleInfo(String a_art_no) throws RemoteException {
		return dao.getArticleInfo(a_art_no);
	}

	
	
	void sendtoAlldata(A_articleVO articleVO,String data) {
		for(Socket socket:roomMap.get(articleVO)) {
			DataOutputStream out ;
			try {
				out = new DataOutputStream(socket.getOutputStream());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	class insertSocket extends Thread{
		Socket socket;
		DataInputStream in;
		A_articleVO articleVO;
		public insertSocket(Socket socket) {
			this.socket = socket;
			try {
				in = new DataInputStream(socket.getInputStream());
				articleVO = dao.getArticleInfo(in.readUTF()); // a_art_no값을 받는다.
				roomMap.get(articleVO).add(socket);
			} catch (IOException e) {
				e.printStackTrace();
			}	
		}
		
		@Override
		public void run() {
			while(socket!= null) {	
			}try {
				sendtoAlldata(articleVO,in.readUTF()); // 아이디
				sendtoAlldata(articleVO,in.readUTF()); // 금액
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				roomMap.get(articleVO).remove(socket);
			}
			
		}
	}
	
	
	class StartSocket extends Thread{
		@Override
		public void run() {
			try {
				ServerSocket server = new ServerSocket(9999);
				while (server != null) {
					Socket socket = server.accept();
					insertSocket th = new insertSocket(socket);
					th.start();
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
